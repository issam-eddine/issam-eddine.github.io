<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://issam-eddine.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://issam-eddine.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-09-23T21:08:36+00:00</updated><id>https://issam-eddine.github.io/feed.xml</id><title type="html">issam-eddine</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">langchain simple example</title><link href="https://issam-eddine.github.io/blog/2025/langchain-simple-example/" rel="alternate" type="text/html" title="langchain simple example"/><published>2025-09-21T11:45:00+00:00</published><updated>2025-09-21T11:45:00+00:00</updated><id>https://issam-eddine.github.io/blog/2025/langchain-simple-example</id><content type="html" xml:base="https://issam-eddine.github.io/blog/2025/langchain-simple-example/"><![CDATA[<p>Let us learn the basics of Langchain using this github repository: <a href="https://github.com/issam-eddine/langchain-simple-example">langchain-simple-example</a>.</p> <p>This repository showcases the use of langchain to create an agent that can respond to queries. It can use tools for searching Wikipedia and saving the results to a file.</p> <p>A simple example of how to use langchain to invoke an LLM:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">os</span>
<span class="kn">from</span> <span class="n">dotenv</span> <span class="kn">import</span> <span class="n">load_dotenv</span>
<span class="kn">from</span> <span class="n">langchain_openai</span> <span class="kn">import</span> <span class="n">ChatOpenAI</span>

<span class="nf">load_dotenv</span><span class="p">()</span>

<span class="n">llm</span> <span class="o">=</span> <span class="nc">ChatOpenAI</span><span class="p">(</span><span class="n">api_key</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_API_KEY</span><span class="sh">"</span><span class="p">),</span> <span class="n">model</span><span class="o">=</span><span class="sh">"</span><span class="s">gpt-4.1-mini</span><span class="sh">"</span><span class="p">)</span>
<span class="n">response</span> <span class="o">=</span> <span class="n">llm</span><span class="p">.</span><span class="nf">invoke</span><span class="p">(</span><span class="sh">"</span><span class="s">What is the capital of the moon?</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">content</span><span class="p">)</span>
</code></pre></div></div> <p>Now, let us check how to create an agent that can use tools to search Wikipedia and save the results to a file â€“ let us dive into the <code class="language-plaintext highlighter-rouge">main.py</code> file:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">os</span>
<span class="kn">from</span> <span class="n">dotenv</span> <span class="kn">import</span> <span class="n">load_dotenv</span>
<span class="kn">from</span> <span class="n">pydantic</span> <span class="kn">import</span> <span class="n">BaseModel</span>
<span class="kn">from</span> <span class="n">langchain_openai</span> <span class="kn">import</span> <span class="n">ChatOpenAI</span>
<span class="kn">from</span> <span class="n">langchain_core.prompts</span> <span class="kn">import</span> <span class="n">ChatPromptTemplate</span>
<span class="kn">from</span> <span class="n">langchain_core.output_parsers</span> <span class="kn">import</span> <span class="n">PydanticOutputParser</span>
<span class="kn">from</span> <span class="n">langchain.agents</span> <span class="kn">import</span> <span class="n">create_tool_calling_agent</span><span class="p">,</span> <span class="n">AgentExecutor</span>
<span class="kn">from</span> <span class="n">tools</span> <span class="kn">import</span> <span class="n">wikipedia_tool</span><span class="p">,</span> <span class="n">save_tool</span>

<span class="nf">load_dotenv</span><span class="p">()</span>


<span class="c1"># Define the structure of the research response
</span><span class="k">class</span> <span class="nc">ResearchResponse</span><span class="p">(</span><span class="n">BaseModel</span><span class="p">):</span>
    <span class="n">topic</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">summary</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">sources</span><span class="p">:</span> <span class="nb">list</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span>
    <span class="n">tools_used</span><span class="p">:</span> <span class="nb">list</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span>


<span class="c1"># Initialize the language model
</span><span class="n">llm</span> <span class="o">=</span> <span class="nc">ChatOpenAI</span><span class="p">(</span><span class="n">api_key</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_API_KEY</span><span class="sh">"</span><span class="p">),</span> <span class="n">model</span><span class="o">=</span><span class="sh">"</span><span class="s">gpt-4.1-mini</span><span class="sh">"</span><span class="p">)</span>
<span class="n">parser</span> <span class="o">=</span> <span class="nc">PydanticOutputParser</span><span class="p">(</span><span class="n">pydantic_object</span><span class="o">=</span><span class="n">ResearchResponse</span><span class="p">)</span>

<span class="c1"># Initialize the output parser
</span><span class="n">prompt</span> <span class="o">=</span> <span class="n">ChatPromptTemplate</span><span class="p">.</span><span class="nf">from_messages</span><span class="p">(</span>
    <span class="p">[</span>
        <span class="p">(</span>
            <span class="sh">"</span><span class="s">system</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"""</span><span class="s">
            You are a research assistant that will help with research queries.
            Provide a final response in this exact JSON format:
            {format_instructions}
            </span><span class="sh">"""</span><span class="p">,</span>
        <span class="p">),</span>
        <span class="p">(</span><span class="sh">"</span><span class="s">placeholder</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">{chat_history}</span><span class="sh">"</span><span class="p">),</span>
        <span class="p">(</span><span class="sh">"</span><span class="s">human</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">{query}</span><span class="sh">"</span><span class="p">),</span>
        <span class="p">(</span><span class="sh">"</span><span class="s">placeholder</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">{agent_scratchpad}</span><span class="sh">"</span><span class="p">),</span>
    <span class="p">]</span>
<span class="p">).</span><span class="nf">partial</span><span class="p">(</span><span class="n">format_instructions</span><span class="o">=</span><span class="n">parser</span><span class="p">.</span><span class="nf">get_format_instructions</span><span class="p">())</span>

<span class="c1"># List of tools available to the agent
</span><span class="n">tools</span> <span class="o">=</span> <span class="p">[</span><span class="n">wikipedia_tool</span><span class="p">,</span> <span class="n">save_tool</span><span class="p">]</span>

<span class="c1"># Create the agent
</span><span class="n">agent</span> <span class="o">=</span> <span class="nf">create_tool_calling_agent</span><span class="p">(</span>
    <span class="n">llm</span><span class="o">=</span><span class="n">llm</span><span class="p">,</span>
    <span class="n">tools</span><span class="o">=</span><span class="n">tools</span><span class="p">,</span>
    <span class="n">prompt</span><span class="o">=</span><span class="n">prompt</span><span class="p">,</span>
<span class="p">)</span>

<span class="c1"># Create the agent executor
</span><span class="n">agent_executor</span> <span class="o">=</span> <span class="nc">AgentExecutor</span><span class="p">(</span>
    <span class="n">agent</span><span class="o">=</span><span class="n">agent</span><span class="p">,</span>
    <span class="n">tools</span><span class="o">=</span><span class="n">tools</span><span class="p">,</span>
    <span class="n">verbose</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>  <span class="c1"># Enable verbose output for debugging
</span><span class="p">)</span>

<span class="c1"># Get user input for research query
</span><span class="n">user_query</span> <span class="o">=</span> <span class="nf">input</span><span class="p">(</span><span class="sh">"</span><span class="s">what can I help you research?</span><span class="sh">"</span> <span class="o">+</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span> <span class="o">*</span> <span class="mi">2</span><span class="p">)</span>

<span class="c1"># Execute the agent with the user's query
</span><span class="n">raw_response</span> <span class="o">=</span> <span class="n">agent_executor</span><span class="p">.</span><span class="nf">invoke</span><span class="p">({</span><span class="sh">"</span><span class="s">query</span><span class="sh">"</span><span class="p">:</span> <span class="n">user_query</span><span class="p">})</span>

<span class="c1"># Print the raw output from the agent
</span><span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">raw output: </span><span class="si">{</span><span class="n">raw_response</span><span class="p">[</span><span class="sh">'</span><span class="s">output</span><span class="sh">'</span><span class="p">]</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>

<span class="k">try</span><span class="p">:</span>
    <span class="c1"># Parse the raw output into a structured format
</span>    <span class="n">structured_response</span> <span class="o">=</span> <span class="n">parser</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="n">raw_response</span><span class="p">[</span><span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">])</span>

    <span class="c1"># Print the structured response
</span>    <span class="nf">print</span><span class="p">()</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">structured response:</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">topic: </span><span class="si">{</span><span class="n">structured_response</span><span class="p">.</span><span class="n">topic</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">summary: </span><span class="si">{</span><span class="n">structured_response</span><span class="p">.</span><span class="n">summary</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">sources: </span><span class="si">{</span><span class="sh">'</span><span class="s">, </span><span class="sh">'</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">structured_response</span><span class="p">.</span><span class="n">sources</span><span class="p">)</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">tools_used: </span><span class="si">{</span><span class="sh">'</span><span class="s">, </span><span class="sh">'</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">structured_response</span><span class="p">.</span><span class="n">tools_used</span><span class="p">)</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>

<span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
    <span class="c1"># Handle parsing errors
</span>    <span class="nf">print</span><span class="p">()</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">note: could not parse structured response: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div> <p>Where we have defined the tools in the <code class="language-plaintext highlighter-rouge">tools.py</code> file:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">os</span>
<span class="kn">from</span> <span class="n">langchain_community.tools</span> <span class="kn">import</span> <span class="n">WikipediaQueryRun</span>
<span class="kn">from</span> <span class="n">langchain_community.utilities</span> <span class="kn">import</span> <span class="n">WikipediaAPIWrapper</span>
<span class="kn">from</span> <span class="n">langchain.tools</span> <span class="kn">import</span> <span class="n">Tool</span>
<span class="kn">from</span> <span class="n">datetime</span> <span class="kn">import</span> <span class="n">datetime</span>

<span class="c1"># Initialize the Wikipedia API wrapper with specified parameters
</span><span class="n">api_wrapper</span> <span class="o">=</span> <span class="nc">WikipediaAPIWrapper</span><span class="p">(</span>
    <span class="n">top_k_results</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span>
    <span class="n">doc_content_chars_max</span><span class="o">=</span><span class="mi">256</span><span class="p">,</span>
<span class="p">)</span>

<span class="c1"># Create a tool for querying Wikipedia
</span><span class="n">wikipedia_tool</span> <span class="o">=</span> <span class="nc">WikipediaQueryRun</span><span class="p">(</span><span class="n">api_wrapper</span><span class="o">=</span><span class="n">api_wrapper</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">save_to_text</span><span class="p">(</span><span class="n">data</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">filename</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">research-output</span><span class="sh">"</span><span class="p">):</span>
    <span class="c1"># Check if the output directory exists, create if not
</span>    <span class="k">if</span> <span class="sh">"</span><span class="s">research-outputs</span><span class="sh">"</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">os</span><span class="p">.</span><span class="nf">listdir</span><span class="p">():</span>
        <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="sh">"</span><span class="s">research-outputs</span><span class="sh">"</span><span class="p">)</span>

    <span class="c1"># Generate a timestamp for the output file
</span>    <span class="n">timestamp</span> <span class="o">=</span> <span class="n">datetime</span><span class="p">.</span><span class="nf">now</span><span class="p">().</span><span class="nf">strftime</span><span class="p">(</span><span class="sh">"</span><span class="s">%Y-%m-%d %H:%M:%S</span><span class="sh">"</span><span class="p">)</span>

    <span class="c1"># Format the text to be saved
</span>    <span class="n">formatted_text</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"""</span><span class="s">â€“â€“â€“ Research Output â€“â€“â€“</span><span class="se">\n</span><span class="s">Timestamp: </span><span class="si">{</span><span class="n">timestamp</span><span class="si">}</span><span class="se">\n\n</span><span class="si">{</span><span class="n">data</span><span class="si">}</span><span class="se">\n\n</span><span class="sh">"""</span>
    <span class="n">filename_with_timestamp</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">filename</span><span class="si">}</span><span class="s"> - </span><span class="si">{</span><span class="n">timestamp</span><span class="si">}</span><span class="s">.txt</span><span class="sh">"</span>
    <span class="n">filepath</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="sh">"</span><span class="s">research-outputs</span><span class="sh">"</span><span class="p">,</span> <span class="n">filename_with_timestamp</span><span class="p">)</span>

    <span class="c1"># Write the formatted text to the output file
</span>    <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">filepath</span><span class="p">,</span> <span class="sh">"</span><span class="s">w</span><span class="sh">"</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="n">f</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="n">formatted_text</span><span class="p">)</span>

    <span class="k">return</span> <span class="sa">f</span><span class="sh">"</span><span class="s">Research data successfully saved to </span><span class="si">{</span><span class="n">filename_with_timestamp</span><span class="si">}</span><span class="sh">"</span>


<span class="c1"># Define a tool for saving research output to a text file
</span><span class="n">save_tool</span> <span class="o">=</span> <span class="nc">Tool</span><span class="p">(</span>
    <span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">save_to_text</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">description</span><span class="o">=</span><span class="sh">"""</span><span class="s">Save structured research output to a text file. 
    Parameters:
        data: The research output to save
        filename: Name for the output file (without extension)
    </span><span class="sh">"""</span><span class="p">,</span>
    <span class="n">func</span><span class="o">=</span><span class="n">save_to_text</span><span class="p">,</span>
<span class="p">)</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="learning"/><category term="code"/><category term="machine-learning"/><summary type="html"><![CDATA[a simple example of how to use langchain]]></summary></entry></feed>